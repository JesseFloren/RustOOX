class Array {

    Array() {}

    static void incr(int[] a, int k, Array l) {
        int x := a[k];
        a[k] := x * 2;
    }

    static void Main(int[] a) 
        requires(a != null && #a > 1 && #a < 10 &&  (forall elem, index : a : elem > 0)) 
    {
        int k := 11;

        Array l := new Array();

        a[k] := 5;

        fork Array.incr(a, k, l);
        fork Array.incr(a, k, l);

        join;

        int x := a[k];
        assert(x == 20);
    }
}

class Array2 {
    int x;
    Array2() {
        this.x := 5;
    }

    static void mul2(Array2 l) {
        int x := l.x;
        l.x := x + 1;
        unlock l;
    }

    static void mul3(Array2 l) {
        lock l;
        int x := l.x;
        l.x := x * 2;
    }

    static void Main()
    {
        Array2 l := new Array2();

        lock l;
        fork Array2.mul2(l);
        fork Array2.mul3(l);

        join;

        int x := l.x;
        assert(x == 12);
    }
}

class Gee {
    static void main(int[] a) 
        requires(a != null && #a > 1 && #a < 10 && (forall elem, index : a : elem > 0))
    {
        int k := 0;
        while (k < #a) {
            a[k] := 0;
            k := k + 1;
        }
        fork Gee.b(a);
        join;
        int x := a[2];
        assert(x == 2);
    }

    static void b(int[] a) {
        int k := 0;
        while (k < #a) {
            int x := a[k];
            a[k] := x + 3;
            k := k + 1;
        }
    }
}

class Foo {
    Foo() {}
    static void f(int[] a)
        requires(a != null && #a > 1 && #a < 10 && (forall elem, index : a : elem > 0))
    {
        int k := 2;
        a[k] := 10;

        Foo g := new Foo();


        fork g.b(a, k - 3);
        fork g.c(a, k + 3);

        join;

        int value := a[k];
        assert(value == 10);
    }

    void b(int[] a, int k) {
        lock this;
        int x := a[k + 3];
        a[k + 3] := x * 2;
        unlock this;
    }

    void c(int[] a, int k) {
        lock this;
        int x := a[k - 3];
        a[k - 3] := x / 2;
        unlock this;
    }
}

class Test {
    Test() {}
    static void f(int[] a, int k)
        requires(a != null && #a > 1 && #a < 10 &&  0 <= k && k < #a && (forall elem, index : a : elem == 1))
    {
        a[k] := 10;

        Test g := new Test();


        fork g.b(a);
        fork g.c(a);

        join;

        int value := a[k];
        assert(value == 13);
    }

    void b(int[] a) {
        int i := 0;
        while (i < #a) {
            lock this;
            int x := a[i];
            a[i] := x + 1;
            unlock this;
        }
    }

    void c(int[] a) {
        int i := 0;
        while (i < #a) {
            lock this;
            int x := a[i];
            a[i] := x + 2;
            unlock this;
        }
    }
}